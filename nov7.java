public class nov7 {
    public static int FindLeastIndexOfElement(int arr[],int target){
        int s=0,e=arr.length-1;

        while(s<e){
            int mid = (s+e)/2;

            if(arr[mid]>=target){
                e = mid;
            }else{
                s=mid+1;
            }
        }

        return s;
    }

    public static int FindLargestIndexOfElement(int arr[],int target){
        int s=0,e=arr.length-1;

        while(s<e){
            int mid = (s+e)/2;

            // System.out.println(arr[mid]+" " +mid);

            if(arr[mid]==target){
                if(arr[mid]==arr[mid+1]){
                    s=mid+1;
                }else{
                    return mid;
                }
            }else if(arr[mid]<target){
                s = mid+1;
            }
            else{
                e=mid-1;
            }
        }

        return s;
    }

    public static int FindUniqueInteger(int arr[]){
        int s=0,e=arr.length-1;
        while(s<e){
            int mid = (e+s)/2;
        //    System.out.println(mid+"   ;;;");
            if(mid%2==0){
                if(arr[mid]==arr[mid+1]){
                    s=mid+2;
                }else if(arr[mid]==arr[mid-1]){
                    e=mid-2;
                }else{
                    return mid;
                }
            }else{
                 if(arr[mid]==arr[mid-1]){
                    s=mid+1;
                }else if(arr[mid]==arr[mid+1]){
                    e=mid-1;
                }
            }
        }
        return arr[s];
    }

    public static int SearchInBitonicArray(int arr[],int target){
        int pivot = findPivot(arr);
        System.out.println(pivot);
        int ans = binarySearchOrders(arr,0,pivot,target);
        System.out.println(ans);
        if(ans==-1)ans=binarySearchOrders(arr,pivot+1,arr.length-1,target);
        return ans;
    }

    public static int binarySearchOrders(int arr[],int s,int e,int target){
        if(arr[s]<arr[e]){
            while(s<=e){
                int m = s+(e-s)/2;

                if(arr[m]>target){
                    e=m-1;
                }else if(arr[m]<target){
                    s=m+1;
                }else{
                    return m;
                }
            }
        }else{
            while (s<=e) {
                int m = s +(e-s)/2;

                if(arr[m]>target){
                    s = m+1;
                }else if(arr[m]<target){
                    e=m-1;
                }else{
                    return m;
                }
            }

        }
        return -1;
    }

    public static int findPivot(int arr[]){
        int s=0,e=arr.length-1;
        while(s<=e){
            int m = s+(e-s)/2;

            if(m<e && arr[m]>arr[m+1]){
                if(m>s && arr[m]>arr[m-1]){
                    return m;
                }else{
                    e=m-1;
                }
            }else if(arr[m]>arr[m-1]){
                s=m+1;
            }
        }
    return s;
    }

    public static void main(String[] args) {
        int te[] = {25,25,42,42,70,70,82,82,118,118,139,139,191,191,208,257,257,264,264,278,278,334,334,406,406,430,430,436,436,484,484};
        
        
        int ans = FindUniqueInteger(te);

        
        System.out.println(ans);
    

    
        int bitonic[] = {12,13,14,22,23,26,30,45,57,58,64,75,76,78,85,86,89,92,93,99,106,119,125,132,137,139,169,170,186,187,189,195,197,215,216,222,226,235,236,237,241,246,258,260,274,276,278,279,280,309,326,331,337,339,342,343,345,361,363,364,369,373,374,378,382,386,393,398,404,407,408,409,417,418,425,431,432,433,436,450,452,453,460,464,470,471,475,476,488,491,494,496,498,500,503,511,514,515,528,538,540,543,551,554,556,557,560,563,571,587,591,592,604,605,613,617,619,620,622,624,637,647,658,661,668,671,675,683,686,692,702,707,709,714,715,717,725,730,732,734,772,777,779,780,786,788,791,792,795,799,800,801,805,830,837,838,840,842,844,846,849,855,866,873,896,899,903,907,910,911,922,937,946,947,950,955,958,968,976,977,981,985,990,992,997,1004,1017,1023,1024,1027,1030,1034,1045,1055,1060,1065,1067,1073,1093,1105,1107,1109,1111,1134,1141,1144,1154,1160,1165,1173,1182,1184,1191,1197,1211,1215,1216,1217,1223,1226,1229,1232,1233,1256,1257,1268,1273,1274,1278,1306,1314,1317,1321,1323,1329,1335,1346,1347,1354,1359,1362,1366,1373,1375,1378,1379,1380,1382,1385,1394,1400,1416,1419,1432,1439,1448,1457,1460,1461,1472,1476,1479,1492,1496,1508,1514,1518,1526,1529,1531,1535,1544,1547,1551,1553,1556,1566,1569,1573,1574,1577,1581,1590,1598,1600,1604,1610,1615,1620,1624,1627,1639,1648,1663,1665,1666,1677,1680,1688,1693,1700,1704,1705,1712,1716,1717,1719,1724,1743,1747,1751,1766,1767,1771,1774,1785,1795,1796,1802,1805,1814,1817,1827,1833,1835,1838,1839,1841,1863,1868,1885,1886,1899,1911,1914,1919,1922,1931,1936,1937,1943,1944,1946,1948,1952,1957,1973,1980,1986,1991,1995,1999,1992,1990,1989,1982,1965,1964,1963,1956,1954,1947,1933,1923,1918,1912,1906,1904,1896,1893,1892,1891,1888,1882,1879,1876,1871,1862,1860,1855,1852,1848,1837,1836,1831,1830,1822,1813,1812,1808,1807,1800,1780,1777,1775,1772,1756,1753,1752,1746,1731,1726,1723,1720,1715,1711,1709,1702,1699,1694,1676,1667,1664,1641,1638,1629,1628,1626,1619,1611,1603,1597,1594,1589,1588,1587,1582,1572,1567,1565,1564,1555,1554,1552,1542,1532,1522,1520,1519,1517,1513,1495,1494,1490,1483,1482,1478,1477,1475,1459,1458,1455,1451,1447,1446,1445,1444,1438,1431,1430,1425,1423,1422,1420,1418,1409,1398,1393,1392,1387,1372,1368,1350,1338,1330,1318,1315,1310,1303,1302,1288,1283,1271,1265,1260,1255,1253,1247,1238,1234,1227,1225,1220,1219,1214,1210,1209,1206,1204,1200,1199,1198,1194,1193,1189,1186,1185,1183,1175,1172,1169,1166,1164,1161,1155,1146,1135,1132,1129,1118,1110,1103,1102,1098,1091,1090,1087,1084,1082,1080,1071,1057,1048,1041,1040,1039,1037,1029,1015,1012,1007,1003,984,982,974,967,962,959,952,948,944,943,938,933,930,919,909,904,894,890,888,885,875,872,870,869,865,864,860,857,843,835,828,826,820,819,817,813,796,785,783,776,767,758,751,745,743,740,728,723,716,695,694,685,684,680,678,676,674,669,663,660,657,652,650,644,636,632,630,629,616,614,606,595,584,582,578,577,572,568,566,562,559,558,555,547,541,539,537,534,526,524,519,509,506,497,492,489,481,477,473,468,459,455,449,442,441,427,423,415,413,412,405,403,397,395,384,376,370,368,367,366,356,354,353,350,348,336,323,316,307,302,293,287,284,277,270,267,266,256,250,245,233,231,224,223,206,202,192,183,175,172,171,159,149,146,142,141,131,130,123,115,114,112,110,107,105,94,88,84,82,81,80,77,67,66,60,49,43,41,34,31,28,27,25,19,16,11,8,6};
        System.out.println(SearchInBitonicArray(bitonic, 1876));
    }
}
